import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get about => "About";
  String get actionCancel => "Cancel";
  String get actionConfirm => "Confirm";
  String get appName => "WERRY";
  String get autoBySystem => "Auto";
  String get challenge_before => "Before";
  String get challenge_content => "Select and complete the challenges below to receive many attractive gifts!";
  String get challenge_list => "Challenge list";
  String get challenge_now => "Currently";
  String get challenge_run => "Ongoing challenge (2)";
  String get close => "Close";
  String get darkMode => "Dark Mode";
  String get feedback => "FeedBack";
  String get fieldNotNull => "not empty";
  String get fontAvenirNext => "AvenirNext";
  String get home_favourite => "Favorites";
  String get home_keyword => "Keywords";
  String get home_menu_air_ticket => "Plane tickets";
  String get home_menu_electronic => "Electronic Market";
  String get home_menu_fashion => "Fashion";
  String get home_menu_hotel => "Hotel";
  String get home_menu_makeup => "Beautify";
  String get home_menu_technology => "Technology";
  String get home_search => "What products do you want to search and review?";
  String get login_confirm_password => "Confirm Password";
  String get login_content1 => "Do not have an account? So let's ";
  String get login_content2 => "right away";
  String get login_password => "Password";
  String get login_title => "Username";
  String get login_username => "Username";
  String get logout => "Sign Out";
  String get needLogin => "NeedLogin";
  String get noAccount => "No Account ? ";
  String get orLoginWith => "Or log in with";
  String get refreshTwoLevel => "release to enter second floor";
  String get register_complete => "Registration successful";
  String get register_content => "Thank you for taking the time to register for an account with Werry. Now start the experience!";
  String get register_content1 => "Do you already have an account? So please ";
  String get register_content2 => " okay";
  String get retry => "Retry";
  String get setting => "Setting";
  String get settingFont => "System Font";
  String get settingLanguage => "Language";
  String get signIn => "Sign In";
  String get signUp => "Sign Up";
  String get splashSkip => "Skip";
  String get tab_challenge => "Challenge";
  String get tab_home => "Homepage";
  String get tab_more => "Expand";
  String get tab_personal => "Personal";
  String get tab_review => "Reviews";
  String get theme => "Theme";
  String get viewStateButtonLogin => "Sign In";
  String get viewStateButtonRefresh => "Refresh";
  String get viewStateButtonRetry => "Retry";
  String get viewStateMessageEmpty => "Nothing Found";
  String get viewStateMessageError => "Load Failed";
  String get viewStateMessageNetworkError => "Load Failed,Check network ";
  String get viewStateMessageUnAuth => "Not sign in yet";
}

class $en extends S {
  const $en();
}

class $vi_VN extends S {
  const $vi_VN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get challenge_content => "Chọn và hoàn thành những thử thách bên dưới để nhận nhiều phần quà hấp dẫn nhé!";
  @override
  String get home_favourite => "Danh mục yêu thích";
  @override
  String get viewStateButtonRetry => "Thử lại";
  @override
  String get about => "Thông tin";
  @override
  String get challenge_list => "Danh sách thử thách";
  @override
  String get signUp => "Đăng ký";
  @override
  String get viewStateMessageEmpty => "Không tìm thấy";
  @override
  String get home_menu_air_ticket => "Vé máy bay";
  @override
  String get viewStateMessageUnAuth => "Bạn chưa đăng nhập";
  @override
  String get setting => "Cài đặt";
  @override
  String get settingFont => "Phông chữ hệ thống";
  @override
  String get feedback => "Phản hồi";
  @override
  String get logout => "Đăng xuất";
  @override
  String get login_password => "Mật khẩu";
  @override
  String get viewStateMessageNetworkError => "Lấy dữ liệu bị Lỗi, kiểm tra kết nối.";
  @override
  String get home_keyword => "Từ khóa";
  @override
  String get autoBySystem => "Auto";
  @override
  String get home_menu_technology => "Công nghệ";
  @override
  String get home_menu_makeup => "Làm đẹp";
  @override
  String get viewStateButtonRefresh => "Lấy lại dữ liệu";
  @override
  String get tab_home => "Trang chủ";
  @override
  String get login_content1 => "Bạn chưa có tài khoản? Vậy hãy ";
  @override
  String get login_content2 => "ngay nhé";
  @override
  String get login_username => "Tài khoản";
  @override
  String get home_search => "Bạn muốn tìm kiếm và đánh giá sản phẩm nào?";
  @override
  String get tab_challenge => "Thử thách";
  @override
  String get refreshTwoLevel => "Phát hành để vào tầng hai";
  @override
  String get register_complete => "Đăng ký thành công";
  @override
  String get home_menu_electronic => "Chợ điện tử";
  @override
  String get challenge_run => "Thử thách đang thực hiện (2)";
  @override
  String get fontAvenirNext => "AvenirNext";
  @override
  String get tab_personal => "Cá nhân";
  @override
  String get login_confirm_password => "Xác nhận mật khẩu";
  @override
  String get register_content2 => " nhé";
  @override
  String get noAccount => "Không tìm thấy tài khoản?";
  @override
  String get register_content1 => "Bạn đã có tài khoản? Vậy hãy ";
  @override
  String get challenge_before => "Trước đây";
  @override
  String get splashSkip => "Bỏ qua";
  @override
  String get actionConfirm => "Xác nhận";
  @override
  String get settingLanguage => "Ngôn ngữ";
  @override
  String get tab_more => "Mở rộng";
  @override
  String get viewStateMessageError => "Lấy dữ liệu bị Lỗi";
  @override
  String get login_title => "Tên đăng nhập";
  @override
  String get actionCancel => "Huỷ";
  @override
  String get theme => "Chủ đề";
  @override
  String get fieldNotNull => "không trống";
  @override
  String get close => "Đóng";
  @override
  String get retry => "Thử lại";
  @override
  String get home_menu_hotel => "Khách sạn";
  @override
  String get tab_review => "Đánh giá";
  @override
  String get appName => "WERRY";
  @override
  String get challenge_now => "Hiện tại";
  @override
  String get needLogin => "Cần đăng nhập";
  @override
  String get home_menu_fashion => "Thời trang";
  @override
  String get signIn => "Đăng nhập";
  @override
  String get viewStateButtonLogin => "Đăng nhập";
  @override
  String get register_content => "Cảm ơn bạn đã dành thời gian đăng ký tài khoản cùng Werry. Bây giờ hãy bắt đầu trải nghiệm nhé!";
  @override
  String get orLoginWith => "Hoặc đăng nhập bằng";
  @override
  String get darkMode => "Chế độ tối";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("vi", "VN"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "vi_VN":
          S.current = const $vi_VN();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
